import groovy.json.JsonSlurper

ext {
    group = 'tw'
    version = "1.0.0"
    main='com.tw.Main'
    jerseyVersion = "2.17"
    servlet_api = '3.0.1'
    jackson_joda = '2.4.0'
    joda_time = '2.6'
}

group ext.group
version ext.version

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.flywaydb:flyway-gradle-plugin:3.0"
        classpath 'mysql:mysql-connector-java:5.1.34'
    }
}


apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'flyway'

mainClassName = "com.tw.Main"

flyway {
    driver = 'com.mysql.jdbc.Driver'
    url = String.format(
            "jdbc:mysql://%s:%s/%s?user=%s&password=%s&allowMultiQueries=true&zeroDateTimeBehavior=convertToNull&createDatabaseIfNotExist=true",
            System.getenv().getOrDefault("DB_HOST", "127.0.0.1"),
            System.getenv().getOrDefault("DB_PORT", "3307"),
            System.getenv().getOrDefault("DB_NAME", "data_store"),
            System.getenv().getOrDefault("DB_USERNAME", "mysql"),
            System.getenv().getOrDefault("DB_PASSWORD", "mysql")
    )
}


sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    itest
    test {
        resources {
            srcDir 'src/itest/resources'
        }
    }
}
dependencies {
    compile "javax.servlet:javax.servlet-api:$servlet_api"
    compile "org.glassfish.jersey.core:jersey-server:$jerseyVersion"
    compile "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$jerseyVersion"
    compile "org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVersion"
    compile 'org.glassfish.grizzly:grizzly-http-servlet:2.3.16'
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion"
    compile 'org.mybatis:mybatis:3.2.8'
    compile "redis.clients:jedis:2.6.2"
    compile "org.apache.commons:commons-lang3:3.3.2"
    compile "org.slf4j:slf4j-api:1.7.7"
    compile "org.slf4j:jcl-over-slf4j:1.7.7"
    compile "org.slf4j:slf4j-log4j12:1.7.7"
    compile "com.github.kstyrc:embedded-redis:0.6"
    compile "org.glassfish.hk2:guice-bridge:2.4.0-b09"
    compile 'com.google.inject:guice:4.0'
    compile "org.mybatis:mybatis-guice:3.6"
    compile 'com.google.inject.extensions:guice-multibindings:4.0'
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jackson_joda"
    compile "joda-time:joda-time:$joda_time"


    itestCompile 'commons-io:commons-io:2.4'
    itestCompile "org.apache.commons:commons-lang3:3.3.2"
    itestCompile group: 'junit', name: 'junit', version: '4.12'
    itestCompile 'org.concordion:concordion:1.5.0'
    itestCompile "org.glassfish.jersey.core:jersey-server:$jerseyVersion"
    itestCompile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion"

    runtime 'mysql:mysql-connector-java:5.1.34'

    testCompile "org.apache.commons:commons-lang3:3.3.2"
    testCompile 'org.concordion:concordion:1.5.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile 'org.mockito:mockito-all:1.8.4'
    testCompile "org.glassfish.jersey.test-framework:jersey-test-framework-core:$jerseyVersion"
    testCompile "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:$jerseyVersion"
}

task standaloneJar(type: Jar, dependsOn: jar) {
    baseName = "app"
    classifier = "standalone"
    version = ""

    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)

    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    exclude("META-INF/*.SF")
    exclude("META-INF/*.DSA")
    exclude("META-INF/*.RSA")
    exclude("META-INF/*.RSA")
    exclude("META-INF/*.RSA")
    manifest {
        attributes 'Main-Class': "$main"
    }
}


task itestJar(type: Jar, dependsOn: jar) {
    def jsonSlurper = new JsonSlurper()
    File configFile = file('manifest.json')
    if (configFile.exists()) {
        def object = jsonSlurper.parse(configFile)
        File propertiesFile = file('src/itest/resources/meta.properties')
        propertiesFile.write(String.format(
                "entry_point=%s\nevaluation_uri=%s\nfirst_commit=%s",
                object.entry_point,
                object.evaluation_uri,
                object.first_commit
        ))
    }

    baseName = "verify"
    classifier = "standalone"
    version = ""

    def sout = new StringBuffer(), serr = new StringBuffer()
    println sout
    from files(sourceSets.itest.output.classesDir)
    from files(sourceSets.itest.output.resourcesDir)

    from configurations.itestCompile.asFileTree.files.collect { zipTree(it) }

    exclude("META-INF/*.SF")
    exclude("META-INF/*.DSA")
    exclude("META-INF/*.RSA")
    exclude("META-INF/*.RSA")
    exclude("META-INF/*.RSA")
    manifest {
        attributes 'Main-Class': 'specs.Main'
    }
}

itestJar.dependsOn itestClasses

task integrationTest(type: Test) {
    testClassesDir = sourceSets.itest.output.classesDir
    classpath = sourceSets.itest.runtimeClasspath
}

task initDataInDB(){
    doFirst {
        flyway {
            locations = ['classpath:db/init']
            initOnMigrate = true
            table = 'schema_version_for_data'
        }
    }
    doLast {
        tasks.flywayMigrate.execute()
    }
}
